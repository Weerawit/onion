package com.worldbestsoft.model;

// Generated Jul 23, 2013 9:54:03 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Transient;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.apache.commons.lang.StringUtils;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.Index;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.Store;

/**
 * Employee generated by hbm2java
 */
@Entity
@Table(name = "employee", catalog = "onion")
@Indexed
public class Employee implements java.io.Serializable {

	private Long id;
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)
	private String firstName;
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)
	private String lastName;
	@Field(index=Index.YES, analyze=Analyze.YES, store=Store.NO)
	private String nickName;
	private Long age;
	private String idCardNo;
	private String address;
	private BigDecimal wage;
	private String memo;
	private Set<JobOrder> jobOrders = new HashSet<JobOrder>(0);

	public Employee() {
	}

	public Employee(String firstName, String lastName, String nickName, Long age, String idCardNo, String address, BigDecimal wage, String memo, Set<JobOrder> jobOrders) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.nickName = nickName;
		this.age = age;
		this.idCardNo = idCardNo;
		this.address = address;
		this.wage = wage;
		this.memo = memo;
		this.jobOrders = jobOrders;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "first_name", length = 50)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", length = 50)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "nick_name", length = 50)
	public String getNickName() {
		return this.nickName;
	}

	public void setNickName(String nickName) {
		this.nickName = nickName;
	}

	@Column(name = "age")
	public Long getAge() {
		return this.age;
	}

	public void setAge(Long age) {
		this.age = age;
	}

	@Column(name = "id_card_no", length = 50)
	public String getIdCardNo() {
		return this.idCardNo;
	}

	public void setIdCardNo(String idCardNo) {
		this.idCardNo = idCardNo;
	}

	@Column(name = "address")
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "wage", precision = 10)
	public BigDecimal getWage() {
		return this.wage;
	}

	public void setWage(BigDecimal wage) {
		this.wage = wage;
	}

	@Column(name = "memo")
	public String getMemo() {
		return this.memo;
	}

	public void setMemo(String memo) {
		this.memo = memo;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
	public Set<JobOrder> getJobOrders() {
		return this.jobOrders;
	}

	public void setJobOrders(Set<JobOrder> jobOrders) {
		this.jobOrders = jobOrders;
	}
	
	@Transient
	public String getFullname() {
		StringBuilder builder = new StringBuilder();
		if (StringUtils.isNotBlank(this.firstName)) {
			builder.append(this.firstName);
			if (StringUtils.isNotBlank(this.lastName)) {
				builder.append(" ").append(this.lastName);
			}
		}
		return builder.toString();
	}

	@Override
    public String toString() {
	    final int maxLen = 10;
	    StringBuilder builder = new StringBuilder();
	    builder.append("Employee [id=");
	    builder.append(id);
	    builder.append(", firstName=");
	    builder.append(firstName);
	    builder.append(", lastName=");
	    builder.append(lastName);
	    builder.append(", nickName=");
	    builder.append(nickName);
	    builder.append(", age=");
	    builder.append(age);
	    builder.append(", idCardNo=");
	    builder.append(idCardNo);
	    builder.append(", address=");
	    builder.append(address);
	    builder.append(", wage=");
	    builder.append(wage);
	    builder.append(", memo=");
	    builder.append(memo);
	    builder.append(", jobOrders=");
	    builder.append(jobOrders != null ? toString(jobOrders, maxLen) : null);
	    builder.append("]");
	    return builder.toString();
    }

	private String toString(Collection<?> collection, int maxLen) {
	    StringBuilder builder = new StringBuilder();
	    builder.append("[");
	    int i = 0;
	    for (Iterator<?> iterator = collection.iterator(); iterator.hasNext() && i < maxLen; i++) {
		    if (i > 0)
			    builder.append(", ");
		    builder.append(iterator.next());
	    }
	    builder.append("]");
	    return builder.toString();
    }

	@Override
    public int hashCode() {
	    final int prime = 31;
	    int result = 1;
	    result = prime * result + ((id == null) ? 0 : id.hashCode());
	    return result;
    }

	@Override
    public boolean equals(Object obj) {
	    if (this == obj)
		    return true;
	    if (obj == null)
		    return false;
	    if (getClass() != obj.getClass())
		    return false;
	    Employee other = (Employee) obj;
	    if (id == null) {
		    if (other.id != null)
			    return false;
	    } else if (!id.equals(other.id))
		    return false;
	    return true;
    }

	
}
